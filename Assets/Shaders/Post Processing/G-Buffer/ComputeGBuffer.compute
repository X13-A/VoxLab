#pragma kernel CSMain

#include "UnityCG.cginc"

// G-Buffer
uint2 _GBufferSize;
uint2 _UnityBufferSize;

RWTexture2D<float4> _PositionBuffer; // The texture to write the positions
RWTexture2D<float4> _NormalBuffer; // The texture to write the normals
RWTexture2D<float4> _DepthBuffer; // The texture to write the depth
RWTexture2D<float4> _BlocksBuffer; // The texture to write block ID's

Texture3D<float4> _WorldTexture;
Texture3D<float4> _BrickMapTexture;
uint3 _WorldTextureSize;
uint3 _BrickMapTextureSize;

Texture2D<float> _UnityDepthTexture;

uint _BrickSize;
float _VoxelRenderDistance;
float4x4 _InvProjectionMatrix;
float4x4 _InvViewMatrix;
float3 _CameraPos;

struct rayMarchInfo
{
    int complexity;
    uint blockID;
    float3 pos;
    float depth;
    float3 normal;
};

rayMarchInfo newRayMarchInfo()
{
    rayMarchInfo info;
    info.complexity = 0;
    info.blockID = 0;
    info.pos = float3(0, 0, 0);
    info.depth = 0;
    info.normal = float3(0, 0, 0);
    return info;
}

bool isInWorld(float3 pos)
{
    bool x = pos.x < (float) _WorldTextureSize.x && pos.x >= 0;
    bool y = pos.y < (float) _WorldTextureSize.y && pos.y >= 0;
    bool z = pos.z < (float) _WorldTextureSize.z && pos.z >= 0;
    return y;
}

// Sample world using world space coordinates
uint sampleWorld(float3 pos)
{
    if (!isInWorld(pos))
    {
        return 0;
    }
    float3 uvw = frac(pos / _WorldTextureSize);
    uint3 texelCoords = (uint3)(uvw * float3(_WorldTextureSize));
    float4 color = _WorldTexture.Load(float4(texelCoords, 0));
    uint blockID = round(color.r * 255);
    return blockID;
}

float4 sampleBrickMap(float3 pos)
{
    if (!isInWorld(pos))
    {
        return 0;
    }

    float3 uvw = frac(pos / _WorldTextureSize); 
    uint3 texelCoords = (uint3)(uvw * float3(_BrickMapTextureSize));
    float4 color = _BrickMapTexture.Load(int4(texelCoords, 0));
    return color;
}

float dstToPlane(float3 rayOrigin, float3 rayDir, float planeY)
{
    // Check if the plane is parallel to the ray
    if (rayDir.y == 0)
    {
        return -1.0f;
    }

    float t = (planeY - rayOrigin.y) / rayDir.y;

    // Check if the plane is behind the ray's origin
    if (t < 0)
    {
        return -1.0f;
    }

    return t;
}

float2 rayWorldHit(float3 rayOrigin, float3 rayDir)
{
    // Returns float3 (dist to world, dist inside world, intersection pos)
    float dstTop = dstToPlane(rayOrigin, rayDir, _WorldTextureSize.y);
    float dstBottom = dstToPlane(rayOrigin, rayDir, 0);

    float dstToWorld;
    float dstInsideWorld;

    // If inside the world
    if (isInWorld(rayOrigin))
    {
        dstToWorld = 0;
        // Check if direction is parallel to the planes
        if (rayDir.y == 0) return float2(dstToWorld, 1e10); 
        // Return dist inside world
        return float2(dstToWorld, max(dstTop, dstBottom));
    } 

    // If above the world
    if (rayOrigin.y > (float) _WorldTextureSize.y)
    {
        // Check if looking at world
        if (dstTop < 0) return float2(-1, -1);

        dstInsideWorld = dstBottom - dstTop;
        return float2(dstTop, dstInsideWorld);
    }
    // If under the world
    else
    {
        // Check if looking at world
        if (dstBottom < 0) return float2(-1, -1);

        dstInsideWorld = dstTop - dstBottom;
        return float2(dstBottom, dstInsideWorld);
    }
}

int3 voxelPos(float3 pos)
{
    return int3(floor(pos.x), floor(pos.y), floor(pos.z));
}

float3 getNormal(float3 tMax, float3 step)
{
    // Determine the normal based on the axis of intersection
    if (tMax.x < tMax.y && tMax.x < tMax.z)
    {
        return step.x * float3(1, 0, 0);
    }
    else if (tMax.y < tMax.z)
    {
        return step.y * float3(0, 1, 0); // HACK
    }
    else
    {
        return step.z * float3(0, 0, 1);
    }
}

rayMarchInfo rayMarchWorld(float3 startPos, float3 rayDir)
{
    float2 rayWorldInfo = rayWorldHit(startPos, rayDir);
    float dstToWorld = rayWorldInfo.x;
    float dstInsideWorld = rayWorldInfo.y;
    rayMarchInfo res = newRayMarchInfo();

    // EXIT EARLY
    if (dstInsideWorld <= 0) 
    {
        res.depth = 1e10;
        return res;
    }
    if (dstToWorld > 0)
    {
        startPos += rayDir * dstToWorld; // Start at intersection point
    }
    int3 voxelIndex = voxelPos(startPos);
    float3 step = sign(rayDir);
    float3 tMax;  // Distance to next voxel boundary
    float3 tMax_old; // Used to get the normals
    float3 tDelta;  // How far we travel to cross a voxel

    // Calculate initial tMax and tDelta for each axis
    [unroll(3)]
    for (int i = 0; i < 3; i++)
    { 
        if (rayDir[i] == 0)
        {
            tMax[i] = 1e10;
            tDelta[i] = 1e10;
        }
        else
        {
            float voxelBoundary = voxelIndex[i] + (step[i] > 0 ? 1 : 0);
            tMax[i] = (voxelBoundary - startPos[i]) / rayDir[i];
            tDelta[i] = abs(1.0 / rayDir[i]);
        }
    }

    float dstLimit = min(_VoxelRenderDistance - dstToWorld, dstInsideWorld + 50); // TODO: +50 is a quick fix, the distInsideWorld calculation was a bit off on the edges. Will investigate when I have time.
    float dstTravelled = 0;

    int loopCount = 0;
    int hardLoopLimit = (int)dstLimit * 2;

    [loop]
    while (loopCount++ < hardLoopLimit && dstTravelled < dstLimit)
    {
        // Check the position for a voxel
        float epsilon = 0.0001f;  // Smaller, more precise offset
        float3 rayPos = startPos + rayDir * (dstTravelled) + epsilon * sign(rayDir);    
        uint blockID = sampleWorld(rayPos);

        // Return the voxel
        if (blockID > 0)
        {
            res.blockID = blockID;
            res.complexity = loopCount;
            res.depth = dstToWorld + dstTravelled;
            res.normal = -getNormal(tMax_old, step);
            res.pos = rayPos;
            return res;
        }

        // Move to the next voxel
        tMax_old = tMax;
        if (tMax.x < tMax.y && tMax.x < tMax.z) // Move along x axis
        {
            dstTravelled = tMax.x;
            tMax.x += tDelta.x;
            voxelIndex.x += step.x;
        }
        else if (tMax.y < tMax.z) // Move along y axis
        {
            dstTravelled = tMax.y;
            tMax.y += tDelta.y;
            voxelIndex.y += step.y;
        }
        else
        {
            dstTravelled = tMax.z; // Move along z axis
            tMax.z += tDelta.z;
            voxelIndex.z += step.z;
        }
    }

    res.complexity = loopCount;
    res.depth = 1e10;
    return res;
}

rayMarchInfo rayMarchBrickMap(float3 startPos, float3 rayDir)
{
    float2 rayWorldInfo = rayWorldHit(startPos, rayDir);
    float dstToWorld = rayWorldInfo.x;
    float dstInsideWorld = rayWorldInfo.y;
    rayMarchInfo res = newRayMarchInfo();

    // EXIT EARLY
    if (dstInsideWorld <= 0) 
    {
        res.depth = 1e10;
        return res;
    }
    if (dstToWorld > 0)
    {
        startPos += rayDir * dstToWorld; // Start at intersection point
    }
    int3 voxelIndex = floor(startPos);
    float3 step = sign(rayDir);
    float3 tMax;  // Distance to next voxel boundary
    float3 tMax_old; // Used to get the normals
    float3 tDelta;  // How far we travel to cross a voxel

    // Calculate initial tMax and tDelta for each axis
    [unroll(3)]
    for (int i = 0; i < 3; i++)
    { 
        if (rayDir[i] == 0)
        {
            tMax[i] = 1e10;
            tDelta[i] = 1e10;
        }
        else
        {
            float voxelBoundary = (floor(voxelIndex[i] / (float) _BrickSize) * _BrickSize + (step[i] > 0 ? _BrickSize : 0));
            tMax[i] = (voxelBoundary - startPos[i]) / rayDir[i]; 
            tDelta[i] = abs(1.0 / rayDir[i]) * _BrickSize;
        }
    }

    float dstLimit = min(_VoxelRenderDistance, dstInsideWorld + 50); // TODO: +50 is a quick fix, the distInsideWorld calculation was a bit off on the edges. Will investigate when I have time.
    float dstTravelled = 0;

    int loopCount = 0;
    int hardLoopLimit = (int) dstLimit * 2; // TODO: hardLoopLimit is a hack that prevents convergence caused by precision issues or some dark mathematical magic

    [loop]
    while (loopCount++ < hardLoopLimit && dstTravelled < dstLimit)
    {
        // Check the position for a voxel
        float epsilon = 0.0001f;  // Smaller, more precise offset
        float3 rayPos = startPos + rayDir * (dstTravelled) + epsilon * sign(rayDir);    
        float brickDensity = sampleBrickMap(rayPos).r;
        
        if (brickDensity > 0)
        {
            res.blockID = 1;
            res.complexity = loopCount;
            res.depth = dstToWorld + dstTravelled;
            res.normal = -getNormal(tMax_old, step);
            res.pos = rayPos;
            return res; 
        }

        // Move to the next voxel
        tMax_old = tMax;
        if (tMax.x < tMax.y && tMax.x < tMax.z)
        {
            dstTravelled = tMax.x;
            tMax.x += tDelta.x;
            voxelIndex.x += step.x *_BrickSize;
        }
        else if (tMax.y < tMax.z)
        {
            dstTravelled = tMax.y;
            tMax.y += tDelta.y;
            voxelIndex.y += step.y *_BrickSize;
        }
        else
        {
            dstTravelled = tMax.z;
            tMax.z += tDelta.z;
            voxelIndex.z += step.z *_BrickSize;
        }
    }

    res.complexity = loopCount;
    res.depth = 1e10;
    return res;
}

rayMarchInfo rayMarchWorld_Brickmap(float3 startPos, float3 rayDir)
{
    float2 rayWorldInfo = rayWorldHit(startPos, rayDir);
    float dstToWorld = rayWorldInfo.x;
    float dstInsideWorld = rayWorldInfo.y;
    rayMarchInfo res = newRayMarchInfo();

    // EXIT EARLY
    if (dstInsideWorld <= 0) 
    {
        res.depth = 1e10;
        return res;
    }
    if (dstToWorld > 0)
    {
        startPos += rayDir * dstToWorld; // Start at intersection point
    }

    int3 voxelIndex = voxelPos(startPos);
    float3 step = sign(rayDir);
    float3 tMax;  // Distance to next voxel or brick boundary
    float3 tDelta;  // How far we travel to cross a voxel or brick
    bool isInBrick = false;

    // Initialize tMax and tDelta
    [unroll(3)]
    for (int i = 0; i < 3; i++)
    { 
        if (rayDir[i] == 0)
        {
            tMax[i] = 1e10;
            tDelta[i] = 1e10;
        }
        else
        {
            if (sampleBrickMap(startPos).r > 0)
            {
                isInBrick = true;
                float voxelBoundary = floor(voxelIndex[i]) + (step[i] > 0 ? 1 : 0);
                tMax[i] = (voxelBoundary - startPos[i]) / rayDir[i]; 
                tDelta[i] = abs(1.0 / rayDir[i]);
            }
            else
            {
                // Calculate boundaries considering brick size
                isInBrick = false;
                float voxelBoundary = floor(voxelIndex[i] / (float) _BrickSize) * _BrickSize + (step[i] > 0 ? _BrickSize : 0);
                tMax[i] = (voxelBoundary - startPos[i]) / rayDir[i]; 
                tDelta[i] = abs(1.0 / rayDir[i]) * _BrickSize;
            }
        }
    }

    float3 tMax_old = tMax; // Used for calculating the normals
    float dstTravelled = 0;
    float dstLimit = min(_VoxelRenderDistance, dstInsideWorld + 50);
    int loopCount = 0;
    int hardLoopLimit = (int)dstLimit * 2;

    [loop]
    while (loopCount++ < hardLoopLimit && dstTravelled < dstLimit)
    {
        float3 normal = -getNormal(tMax_old, step);
        float epsilon = 0.001;
        float3 rayPos = startPos + (rayDir * dstTravelled) - (normal * epsilon);
        float brickDensity = sampleBrickMap(rayPos).r;
        // Switch to voxel traversal 
        if (brickDensity > 0 && !isInBrick)
        {
            isInBrick = true;
            [unroll(3)]
            for (int i = 0; i < 3; i++)
            {
                tDelta[i] = abs(1.0 / rayDir[i]);
                float nextBoundary = floor((startPos[i] + rayDir[i] * dstTravelled) / 1.0) + (step[i] > 0 ? 1 : 0);
                tMax[i] = (nextBoundary - startPos[i]) / rayDir[i];
            }
        }

        // Switch to brick traversal
        else if (brickDensity == 0 && isInBrick)
        {
            isInBrick = false;
            [unroll(3)]
            for (int i = 0; i < 3; i++)
            {
                tDelta[i] = abs(1.0 / rayDir[i]) * _BrickSize;
                float brickBoundary = floor((startPos[i] + rayDir[i] * dstTravelled) / _BrickSize) * _BrickSize + (step[i] > 0 ? _BrickSize : 0);
                tMax[i] = (brickBoundary - startPos[i]) / rayDir[i];
            }
        }

        // Sample only inside filled bricks
        if (isInBrick)
        {
            uint blockID = sampleWorld(rayPos);
            if (blockID > 0)
            {
                res.blockID = blockID;
                res.complexity = loopCount;
                res.depth = dstToWorld + dstTravelled;
                res.normal = normal;
                res.pos = rayPos;
                return res; 
            }
        }


        // Move to the next voxel or brick boundary
        float minTMax = min(tMax.x, min(tMax.y, tMax.z));
        dstTravelled += minTMax;

        int multiplier = 1;
        if (!isInBrick) multiplier = _BrickSize;

        // Determine which axis has the minimum tMax and advance the ray to the next boundary in that axis
        tMax_old = tMax;
        if (tMax.x <= tMax.y && tMax.x <= tMax.z)
        {
            // Move along the x-axis
            dstTravelled = tMax.x;
            tMax.x += tDelta.x;
            voxelIndex.x += step.x * multiplier;
        }
        else if (tMax.y <= tMax.z)
        {
            // Move along the y-axis
            dstTravelled = tMax.y;
            tMax.y += tDelta.y;
            voxelIndex.y += step.y * multiplier;
        }
        else
        {
            // Move along the z-axis
            dstTravelled = tMax.z;
            tMax.z += tDelta.z;
            voxelIndex.z += step.z * multiplier;
        }
    }

    res.complexity = loopCount;
    res.depth = 1e10;
    return res;
}

float computeUnityDepth(uint3 id)
{
    float2 depthUV = id.xy * ((float2) _UnityBufferSize / (float2) _GBufferSize);
    return LinearEyeDepth(_UnityDepthTexture[depthUV]);
}

float3 computeRayDir(float2 uv)
{    
    float3 direction = mul(_InvProjectionMatrix, float4(uv, 0.0f, 1.0f)).xyz;
    direction = mul(_InvViewMatrix, float4(direction, 0.0f)).xyz;
    return direction;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / (float2) _GBufferSize * 2.0f - 1.0f);

    float3 rayPos = _CameraPos;
    float3 rayDir = computeRayDir(uv);

    // Raymarch world
    float2 rayWorldInfo = rayWorldHit(rayPos, rayDir);
    rayMarchInfo rayMarchRes = rayMarchWorld_Brickmap(rayPos, rayDir); 

    float unityDepth = computeUnityDepth(id);
    float voxelDepth = rayMarchRes.depth;
    uint blockID = rayMarchRes.blockID;
    float3 normal = rayMarchRes.normal;
    float3 pos = rayMarchRes.pos;

    // Combine depths
    float combinedDepth = voxelDepth;
    if (unityDepth < voxelDepth)
    {
        blockID = 0;
        normal = 0;
        combinedDepth = unityDepth;
        pos = rayPos + rayDir * unityDepth;
    }

    // Fill buffers
    _BlocksBuffer[id.xy] = float4(blockID, 0, 0, 1);
    _NormalBuffer[id.xy] = float4(normal, 1);
    _DepthBuffer[id.xy] = combinedDepth;
    _PositionBuffer[id.xy] = float4(pos, 1);
}